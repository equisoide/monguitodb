{"name":"MonguitoDB","tagline":"Utility to perform CRUD operations over the localStorage and sessionStorage","body":"# MonguitoDB\r\n\r\nUtility to perform CRUD operations over the localStorage, sessionStorage, or any object implementing the [Storage Interface](http://www.w3.org/TR/webstorage/#the-storage-interface) defined by the W3C.\r\n\r\nThis library was inspired by MongoDB, and some of its functions are syntactically similar to how they are in Mongo, with some differences and limitations.\r\n\r\nNOTE: This utility works synchronously.\r\n\r\n## Installation\r\n\r\nDownload the [minified library](https://raw.githubusercontent.com/equisoide/monguitodb/master/build/monguito-db.min.js) (which is under 10KB) and include it in your html. Alternatively you can download the [development version](https://raw.githubusercontent.com/equisoide/monguitodb/master/build/monguito-db.js).\r\n\r\n```html\r\n<script src=\"monguito-db.min.js\"></script>\r\n```\r\n\r\n## Getting started\r\n\r\nInitialize a new database instance with **new MonguitoDB(storage, collections)** where:\r\n\r\n- **storage**: Is an object providing the storage mechanism. You can send localStorage or sessionStorage if the browser supports HTML5. Send null to use the default mechanism which stores collections in memory. Alternatively, you can send your own object implementing the [Storage Interface](http://www.w3.org/TR/webstorage/#the-storage-interface) defined by the W3C.\r\n- **collections**: Is an array containing the names of the collections to be manipulated (analogous to tables in a relational database). You can send a single name, or an array of names if you want to manipulate several collections.\r\n\r\n```js\r\n// An object to perform CRUD operations over the HTML5 localStorage.\r\nvar db = new MonguitoDB(localStorage, \"orders\");\r\n\r\n// An object to perform CRUD operations over the HTML5 sessionStorage.\r\nvar db = new MonguitoDB(sessionStorage, [\"orders\", \"users\"]);\r\n\r\n// An object to perform CRUD operations over collections stored in memory.\r\nvar db = new MonguitoDB(null, [\"orders\", \"users\"]);\r\n```\r\n\r\n## Collection\r\n\r\nA collection is a set of documents. It is equivalent to a table in the relational world, with the difference that a collection does not enforce a schema.\r\n\r\nThe following actions can be performed on a Collection: **insert, update, remove, find, findOne, get, count.**\r\n\r\nCollections are initialized by **MonguitoDB()** constructor, they can't be initialized by yourself.\r\n\r\n```js\r\n// The following code shows how to reference collections initialized by\r\n// MonguitoDB() constructor.\r\nvar db = new MonguitoDB(localStoraCoge, [\"orders\", \"users\"]);\r\n\r\nvar ordersCollection = db.orders;\r\nvar usersCollection  = db.users;\r\n```\r\n\r\n### Collection.insert(obj) → {[Document](#document)}\r\n\r\nInserts a new object into the collection and returns a reference to the inserted [Document](#document).\r\n\r\nNOTE: _id property is the document's \"primary key\" wich is automatically assigned. It can be of two types:\r\n 1. Auto-numeric: when _id is omitted in the passed-in obj.\r\n 2. [UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier): When _id is set to \"uuid\" in the passed-in obj.\r\n \r\n| Parameter | Type   | Description                             |\r\n| --------- | ------ | --------------------------------------- |\r\n| obj       | object | Document to insert into the collection  |\r\n\r\n**Returns**: [Document](#document)\r\n\r\n```js\r\nvar db = new MonguitoDB(localStorage, \"orders\");\r\n\r\n// case 1) _id will be automatically assigned as an auto-numeric value.\r\nvar order = db.orders.insert({recipient: \"Juan\", total: 50});\r\nvar documentId = order._id;\r\n\r\n// case 2) _id will be automatically assigned as an UUID.\r\nvar order = db.orders.insert({_id: \"uuid\", recipient: \"Juan\", total: 50});\r\nvar documentId = order._id;\r\n```\r\n\r\n### Collection.update(query, obj) → {[Cursor](#cursor)}\r\n\r\nUpdates one or several documents in the collection and returns a [Cursor](#cursor) containing the updated documents.\r\n\r\nNOTE: _id property can't be modified.\r\n \r\n| Parameter | Type             | Description                                  |\r\n| --------- | ---------------- | -------------------------------------------- |\r\n| query     | object, function | Selection criteria for the update            |\r\n| obj       | object           | The modifications to apply (_id is omitted)  |\r\n\r\n**Returns**: [Cursor](#cursor)\r\n\r\n```js\r\n var db = new MonguitoDB(localStorage, \"orders\");\r\n\r\n // Updates a single document (that one matching _id = 1).\r\n db.orders.update({_id: 1}, {status: \"Delivered\"});\r\n\r\n // Updates several documents (those matching recipient = \"Juan\").\r\n db.orders.update({recipient: \"Juan\"}, {status: \"Delivered\"});\r\n```\r\n\r\n### Collection.remove(query)\r\n\r\nRemoves one or several documents from the collection.\r\n\r\nNOTE: If no query is passed-in, all documents in the collection will be removed.\r\n\r\n```js\r\nvar db = new MonguitoDB(localStorage, \"orders\");\r\n\r\n// Removes a single document (that one matching _id = 1).\r\ndb.orders.remove({_id: 1});\r\n\r\n// Removes several documents (those matching recipient = \"Juan\").\r\ndb.orders.remove({recipient: \"Juan\"});\r\n\r\n// Removes all documents in the collection.\r\ndb.orders.remove();\r\n```\r\n\r\n### Collection.find(query) → {[Cursor](#cursor)}\r\n\r\nRetrieves all documents in the collection matching the specified query. If no query is passed-in, all documents within the collection will be returned.\r\n\r\nThis function returns a [Cursor](#cursor) that can be manipulated as an array plus the following actions: **update, remove, find, findOne, get, first, last, sort, pretty, count.**\r\n\r\n| Parameter | Type             | Description                    |\r\n| --------- | ---------------- | ------------------------------ |\r\n| query     | object, function |  Specifies selection criteria  |\r\n\r\n**Returns**: [Cursor](#cursor)\r\n\r\n```js\r\nvar db     = new MonguitoDB(localStorage, \"orders\");\r\nvar orders = db.orders.find();\r\n\r\n// Each element in the cursor is of type Document\r\norders.forEach(function (order) {\r\n   console.log(order.pretty());\r\n});\r\n\r\n// Applying conditions to retrieve the data.\r\norders = db.orders.find({status: \"Delivered\"});\r\norders = db.orders.find({status: \"Delivered\", seller: \"Armani\"});\r\norders = db.orders.find(function (e) { return e.total > 700; });\r\n\r\n// Sorting the data.\r\norders = db.orders.find().sort(\"seller\");\r\norders = db.orders.find().sort(\"seller, total\");\r\norders = db.orders.find().sort(\"seller ASC, total DESC\");\r\n\r\n// Executing many actions in cascade.\r\nvar firstOrder = db.orders.find().sort(\"total\").first();\r\nvar lastOrder  = db.orders.find().sort(\"total\").last();\r\n\r\n// Printing the whole collection.\r\nconsole.log(db.orders.find().pretty());\r\n```\r\n\r\n### Collection.findOne(query) → {[Document](#document) | null}\r\n\r\nReturns a [Document](#document) that satisfies the specified query. If multiple documents satisfy the query, it will be returned the first document found (according to insertion order). If there is no matching document within the collection, it will be returned null.\r\n\r\nThe following actions can be performed on the returned document: **update, remove, pretty**.\r\n\r\n| Parameter | Type             | Description                  |\r\n| --------- | ---------------- | ---------------------------- |\r\n| query     | object, function | Specifies selection criteria |\r\n\r\n**Returns**: [Document](#document) | null\r\n\r\n```js\r\nvar db    = new MonguitoDB(localStorage, \"orders\");\r\nvar order = db.orders.findOne({recipient: \"Juan\"});\r\n\r\nconsole.log(order.pretty());         // Prints the document.\r\norder.update({status: \"Delivered\"}); // Updates the document.\r\norder.remove();                      // Removes the document.\r\n\r\n// Using findOne() with a function criteria.\r\nvar order = db.orders.findOne(function (e) { return e.total > 0; });\r\n```\r\n\r\n### Collection.get(documentId) → {[Document](#document) | null}\r\n\r\nGets the Document that matches the specified _id. If there is no matching document within the collection, it will be returned null.\r\n\r\nThe following actions can be performed on the returned document: **update, remove, pretty**.\r\n\r\nNOTE: get() is faster than find() and findOne().\r\n\r\n| Parameter  | Type           | Description   |\r\n| ---------- | -------------- | ------------- |\r\n| documentId | number, string |  Document _id |\r\n\r\n**Returns**: [Document](#document) | null\r\n\r\n```js\r\nvar db    = new MonguitoDB(localStorage, \"orders\");\r\nvar order = db.orders.get(1);\r\n\r\nconsole.log(order.pretty());         // Prints the document.\r\norder.update({status: \"Delivered\"}); // Updates the document.\r\norder.remove();                      // Removes the document.\r\n```\r\n\r\n### Collection.count() → {number}\r\n\r\nCounts the number of documents in the collection.\r\n\r\n**Returns**: number\r\n\r\n```js\r\nvar db    = new MonguitoDB(localStorage, \"orders\");\r\nvar count = db.orders.count();\r\n```\r\n\r\n## Document\r\n\r\nA document belongs to a Collection. It is a JSON structure composed by key-value pairs. It can be thought as a \"record\" belonging to a table in the relational world.\r\n\r\nThe following actions can be performed on a document: **update, remove, pretty**.\r\n\r\nDocuments are retrieved through methods in the Collection class, they can't be initialized by yourself.\r\n\r\n```js\r\nvar db = new MonguitoDB(localStorage, \"orders\");\r\n\r\n// You get a reference to a Document when you insert one.\r\nvar order = db.orders.insert({recipient: \"Juan\", total: 50});\r\n\r\n// You can get a Document with get() if you know its _id.\r\nvar order = db.orders.get(1);\r\n\r\n// Individual elements retrieved from find() are of type Document.\r\nvar order = db.orders.find({recipient: \"Juan\"})[0];\r\n\r\n// By using findOne you can get the first Document retrieved from a query.\r\nvar order = db.orders.findOne({recipient: \"Juan\"});\r\n\r\n// You can also get a reference to a Document by using first() or last().\r\nvar order = db.orders.find().first();\r\n```\r\n\r\n### Document.update(obj) → {[Document](#document)}\r\n\r\nUpdates the document in the storage.\r\n\r\nNOTE: _id property can't be modified.\r\n\r\n| Parameter  | Type   | Description                                  |\r\n| ---------- | ------ | -------------------------------------------- |\r\n| obj        | object |  The modifications to apply (_id is omitted) |\r\n\r\n**Returns**: [Document](#document)\r\n\r\n```js\r\nvar db    = new MonguitoDB(localStorage, \"orders\");\r\nvar order = db.orders.get(1);\r\n\r\n// Update with arguments.\r\norder.update({status: \"Delivered\"});\r\n\r\n// Update without arguments.\r\norder.status = \"Delivered\";\r\norder.update();\r\n```\r\n\r\n### Document.remove()\r\n\r\nRemoves the document from the storage.\r\n\r\nNOTE: Once you call remove() on a document, you can't perform remove() or update() on the document anymore, because an exception will be thrown.\r\n\r\n```js\r\nvar db    = new MonguitoDB(localStorage, \"orders\");\r\nvar order = db.orders.get(1);\r\n\r\norder.remove();\r\n```\r\n\r\n### Document.pretty() → {string}\r\n\r\nGets a \"pretty\" JSON representation of the document.\r\n\r\n**Returns**: string\r\n\r\n```js\r\nvar db    = new MonguitoDB(localStorage, \"orders\");\r\nvar order = db.orders.get(1);\r\n\r\nconsole.log(order.pretty());\r\n```\r\n\r\n## Cursor\r\n\r\nA cursor is a set of documents. It can be manipulated as an array plus the following actions: **update, remove, find, findOne, get, first, last, sort, pretty, count**.\r\n\r\nCursors are initialized by Collection.find(), they can't be initialized by yourself.\r\n\r\n```js\r\nvar db     = new MonguitoDB(localStorage, \"orders\");\r\nvar cursor = db.orders.find({recipient: \"Juan\"});\r\n```\r\n\r\n### Cursor.update(obj) → {[Cursor](#cursor)}\r\n\r\nUpdates all documents in the cursor (changes are applied both in the cursor and the storage).\r\n\r\nNOTE: _id property can't be modified.\r\n\r\n| Parameter  | Type   | Description                                  |\r\n| ---------- | ------ | -------------------------------------------- |\r\n| obj        | object |  The modifications to apply (_id is omitted) |\r\n\r\n**Returns**: [Cursor](#cursor)\r\n\r\n```js\r\nvar db     = new MonguitoDB(localStorage, \"orders\");\r\nvar cursor = db.orders.find({recipient: \"Juan\"});\r\n\r\n// Updates all orders belonging to \"Juan\" with status \"Delivered\".\r\ncursor.update({status: \"Delivered\"});\r\n```\r\n\r\n### Cursor.remove()\r\n\r\nRemoves all documents in the cursor (changes are applied both in the cursor and the storage).\r\n\r\nNOTE: Once you call remove() on a cursor the cursor will be empty.\r\n\r\n```js\r\nvar db     = new MonguitoDB(localStorage, \"orders\");\r\nvar cursor = db.orders.find({recipient: \"Juan\"});\r\n\r\n// Removes all orders belonging to \"Juan\".\r\ncursor.remove();\r\n```\r\n\r\n### Cursor.find(query) → {[Cursor](#cursor)}\r\n\r\nRetrieves all documents within the cursor that match the specified query.\r\n\r\nNOTE: This function creates and returns a new cursor (the original one won't be modified).\r\n\r\n| Parameter  | Type             | Description                  |\r\n| ---------- | ---------------- | ---------------------------- |\r\n| query      | object, function | Specifies selection criteria |\r\n\r\n**Returns**: [Cursor](#cursor)\r\n\r\n```js\r\nvar db     = new MonguitoDB(localStorage, \"orders\");\r\nvar cursor = db.orders.find({recipient: \"Juan\"});\r\n\r\n// Gets all orders belonging to \"Juan\" with status \"Pending\".\r\nvar pending = cursor.find({status: \"Pending\"});\r\n\r\n// Gets all orders belonging to \"Juan\" with total >= 1000.\r\nvar expensive = cursor.find(function (e) { return e.total >= 1000; });\r\n```\r\n\r\n### Cursor.findOne(query) → {[Document](#document) | null}\r\n\r\nReturns a [Document](#document) within the cursor matching the specified query. If multiple documents satisfy the query, it will be returned the first document found. If there is no matching document within the cursor, it will be returned null.\r\n\r\n| Parameter  | Type             | Description                  |\r\n| ---------- | ---------------- | ---------------------------- |\r\n| query      | object, function | Specifies selection criteria |\r\n\r\n**Returns**: [Document](#document) | null\r\n\r\n```js\r\nvar db     = new MonguitoDB(localStorage, \"orders\");\r\nvar cursor = db.orders.find({recipient: \"Juan\"});\r\n\r\n// Gets the order belonging to \"Juan\" with number \"107-1\".\r\nvar order = cursor.findOne({number: \"107-1\"});\r\n\r\n// Another way to do the same above.\r\nvar order = cursor.findOne(function (e) { return e.number === \"107-1\"});\r\n```\r\n\r\n### Cursor.get(documentId) → {[Document](#document) | null}\r\n\r\nGets the [Document](#document) within the cursor matching the specified _id. If there is no matching document within the cursor, it will be returned null.\r\n\r\n| Parameter  | Type           | Description  |\r\n| ---------- | -------------- | ------------ |\r\n| documentId | number, string | Document _id |\r\n\r\n**Returns**: [Document](#document) | null\r\n\r\n```js\r\nvar db     = new MonguitoDB(localStorage, \"orders\");\r\nvar cursor = db.orders.find({recipient: \"Juan\"});\r\n\r\n// Gets the order belonging to \"Juan\" with _id = 1.\r\nvar order = cursor.get(1);\r\n```\r\n\r\n### Cursor.first() → {[Document](#document) | null}\r\n\r\nReturns the first [Document](#document) within the cursor. If the cursor is empty, it will be returned null.\r\n\r\n**Returns**: [Document](#document) | null\r\n\r\n```js\r\nvar db     = new MonguitoDB(localStorage, \"orders\");\r\nvar cursor = db.orders.find({recipient: \"Juan\"});\r\n\r\n// Gets the first order belonging to \"Juan\".\r\nvar order = cursor.first();\r\n```\r\n\r\n### Cursor.last() → {[Document](#document) | null}\r\n\r\nReturns the last [Document](#document) within the cursor. If the cursor is empty, it will be returned null.\r\n\r\n**Returns**: [Document](#document) | null\r\n\r\n```js\r\nvar db     = new MonguitoDB(localStorage, \"orders\");\r\nvar cursor = db.orders.find({recipient: \"Juan\"});\r\n\r\n// Gets the last order belonging to \"Juan\".\r\nvar order = cursor.last();\r\n```\r\n\r\n### Cursor.sort(sortExpression) → {[Cursor](#cursor)}\r\n\r\nSorts the cursor and returns a reference to the new sorted cursor.\r\n\r\nNOTE: This function creates and returns a new cursor (the original one won't be modified).\r\n\r\n| Parameter      | Type   | Description                                                        |\r\n| -------------- | ------ | ------------------------------------------------------------------ |\r\n| sortExpression | string | Sort expression (You can use ASC or DESC to specify sort direction |\r\n\r\n**Returns**: [Cursor](#cursor)\r\n\r\n```js\r\nvar db     = new MonguitoDB(localStorage, \"orders\");\r\nvar cursor = db.orders.find({recipient: \"Juan\"});\r\n\r\n// Sorts the documents by seller (Default sort direction is ascending).\r\norders = cursor.sort(\"seller\");\r\n\r\n// Sorts the documents by seller and total.\r\norders = cursor.sort(\"seller, total\");\r\n\r\n// Sorts the documents by seller (ascending) and total (descending).\r\norders = cursor.sort(\"seller ASC, total DESC\");\r\n```\r\n\r\n### Cursor.pretty() → {string}\r\n\r\nGets a \"pretty\" JSON representation of the cursor.\r\n\r\n**Returns**: string\r\n\r\n```js\r\nvar db     = new MonguitoDB(localStorage, \"orders\");\r\nvar cursor = db.orders.find({recipient: \"Juan\"});\r\n\r\n// Prints all orders belonging to \"Juan\".\r\nconsole.log(cursor.pretty());\r\n```\r\n\r\n### Cursor.count() → {number}\r\n\r\nCounts the number of documents within the cursor.\r\n\r\n**Returns**: number\r\n\r\n```js\r\nvar db     = new MonguitoDB(localStorage, \"orders\");\r\nvar cursor = db.orders.find({recipient: \"Juan\"});\r\n\r\n// Counts the number of orders belonging to \"Juan\"\r\nvar count  = cursor.count();\r\n```\r\n\r\n## TODO List\r\n\r\n- Full demo page\r\n- Pagination\r\n- Import data\r\n- Agregation framework\r\n- Full text search\r\n- Replication\r\n\r\n## Creator\r\n\r\n**Juan Cuartas**\r\n\r\n- <http://juancuartas.com>\r\n- <https://twitter.com/juancuartas>\r\n\r\n## Copyright and license\r\n\r\nCode and documentation released under [the MIT license](https://github.com/equisoide/monguitodb/blob/master/LICENSE)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}